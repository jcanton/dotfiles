# ==========================
# ===  General settings  ===
# ==========================

# ！！！important！！！ 24 bit color (otherwise vim colors are screwed)
# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",*256col*:Tc"
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

# allow passthrough color escape sequences
# set -g allow-passthrough 1

set -g history-limit 50000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on

# Change prefix key to C-a, easier to type
unbind C-b
set -g prefix C-a
bind-key C-a send-prefix

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on


# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
#unbind }    # swap-pane -D
#unbind {    # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left


# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-nvim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# new window and retain cwd
bind C-c new-window -c "#{pane_current_path}"

# Choose tree
bind C-w choose-tree

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind C-r command-prompt -I "#{window_name}" "rename-window '%%'"
bind r command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r C-j previous-window
bind -r C-k next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D
# Select panes using C-'hjkl' without prefix
bind -n C-h select-pane -L
bind -n C-l select-pane -R
bind -n C-k select-pane -U
bind -n C-j select-pane -D

# Zoom pane
bind + resize-pane -Z

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# # Swap panes back and forth with 1st pane
# # When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# bind \ if '[ #{pane_index} -eq 1 ]' \
#      'swap-pane -s "!"' \
#      'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
#bind C-u command-prompt -p "Session to merge with: " \
#   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
#bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'


# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on

# TODO: Does not work as well, check on newer versions
# set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
# set -g visual-bell on
# setw -g bell-action other

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
#set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind p paste-buffer

# trigger copy mode by
bind -n M-Up copy-mode
bind l copy-mode

bind -T copy-mode-vi v                 send-keys -X begin-selection
bind -T copy-mode-vi C-v               send-keys -X begin-selection
bind -T copy-mode-vi y                 send-keys -X copy-selection

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# Try to avoid every shell being a login shell
set -g default-command "${SHELL}"

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"


# =======================================
# ===   tmux navigation integration   ===
# =======================================
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" { send-keys C-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'C-j' if-shell "$is_vim" { send-keys C-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'C-k' if-shell "$is_vim" { send-keys C-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n 'C-l' if-shell "$is_vim" { send-keys C-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }

bind-key -T copy-mode-vi 'C-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'C-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'C-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'C-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# =====================================
# ===        focus events           ===
# =====================================
# This way vim should realize when it lost focus
set -g focus-events on

# =====================================
# ===           Theme               ===
# =====================================

# This are named colors
# https://terminal-colors.alanwsmith.com
#
color_primary="colour$JC_COLOR11"
color_secondary="colour$JC_COLOR02"
color_tertiary="colour$JC_COLOR03"
color_bg_primary="colour$JC_COLOR01"
color_bg_secondary="colour$JC_COLOR03"

color_level_ok="colour$JC_COLOR_OK"
color_level_warn="colour$JC_COLOR_WARN"
color_level_stress="colour$JC_COLOR_STRESS"

# =====================================
# ===    Appearence and status bar  ===
# =====================================

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position bottom
set -g status-justify left
set -g status-right-length 100

# outline for active pane (separating border line)
set -g pane-active-border-style "fg=$color_primary"

# status line style
set -g status-style "fg=$color_secondary,bg=$color_bg_primary"

# inactive windows format and style
set -g window-status-format " #I:#W "
#set -g window-status-style "fg=$color_secondary,bg=$color_bg_primary" # this gets the status-style, otherwise it does not get overwritten when nesting sessions

# active window format and style
set -g window-status-current-format " #I:#W "
set -g window-status-current-style "fg=$color_bg_primary,bold,bg=$color_primary"

# set status line style for windows with an activity alert
set -g window-status-activity-style "fg=$color_level_warn"

# command line style
set -g message-style "fg=$color_primary,bg=$color_bg_primary"

# highlighting style
set -g mode-style "fg=$color_secondary,bg=$color_primary"

# window segments separators
set -g window-status-separator ""


# define widgets we're going to use in status bar
wg_session="#[fg=$color_primary,bold] #S #[default]"
wg_is_keys_off="#[fg=$color_secondary,bg=$color_level_stress]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"
wg_is_zoomed="#[fg=$color_bg_primary,bg=$color_primary]#{?window_zoomed_flag,[Z],}#[default]"
wg_user_host="#[fg=$color_primary]#(whoami)#[default]@#H"
wg_user_host="#(whoami)#[fg=$color_primary]@#H#[default]"
wg_system_load="#{cpu_fg_color}CPU:#{cpu_percentage}#[default] | #{ram_fg_color}MEM:#{ram_percentage}#[default]"

set -g status-left "$wg_session"
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed $wg_user_host | #{window_index}.#{pane_index} |  #{continuum_status} | $wg_system_load"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_bg_primary"
set -g @prefix_highlight_bg "$color_primary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_bg_primary,bg=$color_primary"

# Configure system load style
set -g @cpu_low_fg_color    "#[fg=$color_level_ok]"
set -g @cpu_medium_fg_color "#[fg=$color_level_warn]"
set -g @cpu_high_fg_color   "#[fg=$color_level_stress]"
set -g @ram_low_fg_color    "#[fg=$color_level_ok]"
set -g @ram_medium_fg_color "#[fg=$color_level_warn]"
set -g @ram_high_fg_color   "#[fg=$color_level_stress]"
set -g @cpu_percentage_format "%5.1f%%"
set -g @ram_percentage_format "%5.1f%%"

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'christoomey/vim-tmux-navigator'

set -g @resurrect-save 'C-s'
set -g @resurrect-restore 'M-R'
bind R run-shell "~/.tmux/plugins/tmux-resurrect/scripts/restore.sh" \;\
       run-shell "tmux kill-session -t 0"
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

# Last saved environment is automatically restored when tmux is started.
set -g @continuum-restore 'off'
set -g @continuum-save-interval '5'


# ==============================================
# ===   Nesting local and remote sessions    ===
# ==============================================

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237
# Also, change the visual style of the status bar when the keys are off

bind -T root C-F9  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_secondary,bg=$color_bg_secondary" \;\
    set window-status-current-style "fg=$color_bg_primary,bold,bg=$color_secondary" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S

bind -T off C-F9 \
    set -u prefix \;\
    set -u key-table \;\
    set -u status-style \;\
    set -u window-status-current-style \;\
    refresh-client -S

#-------------------------------------------------------------------------------
# Install tpm and plugins
setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins/"
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
