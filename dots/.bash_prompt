#!/usr/bin/env bash

prompt_git() {
    local s=''
    local branchName=''

    # Check if the current directory is in a Git repository.
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # Check for what branch we’re on.
    # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
    # tracking remote branch or tag. Otherwise, get the
    # short SHA for the latest commit, or give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
        git describe --all --exact-match HEAD 2>/dev/null ||
        git rev-parse --short HEAD 2>/dev/null ||
        echo '(unknown)')"

    # Early exit for some repos, as the dirty check takes too long.
    repoUrl="$(git config --get remote.origin.url)"
    repoList=("chromium/src.git" "C2SM/icon-exclaim.git")
    for repo in "${repoList[@]}"; do
        if grep -q "${repo}" <<<"${repoUrl}"; then
            s+='***'
            skip_repo="yes"
            break
        fi
    done
    if [ -z ${skip_repo} ]; then
        # Check for uncommitted changes in the index.
        if ! $(git diff --quiet --ignore-submodules --cached); then
            s+='+'
        fi
        # Check for unstaged changes.
        if ! $(git diff-files --quiet --ignore-submodules --); then
            s+='!'
        fi
        # Check for untracked files.
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            s+='?'
        fi
        # Check for stashed files.
        if $(git rev-parse --verify refs/stash &>/dev/null); then
            s+='$'
        fi
    fi

    [ -n "${s}" ] && s=" ${s}"

    echo -e "${branchName}\n${s}"
}

# styles (can be combined)
# 00: normal
# 01: bold
# 03: italic
# 04: underline
# 07: reverse fg/bg colors
#
# colors
# 38;5;{color_nr}m for the foreground
# 48;5;{color_nr}m for the background

reset="\[\e[0m\]"
style_separator="\[\\033[01;38;5;${JC_COLOR02}m\]"
#style_user="\[\\033[01;38;5;${JC_COLOR03}m\]"
style_host="\[\\033[01;38;5;${JC_COLOR11}m\]"
style_directory="\[\\033[01;38;5;${JC_COLOR22}m\]"
style_git_branch="\[\\033[01;38;5;${JC_COLOR31}m\]"
style_git_status="\[\\033[01;38;5;${JC_COLOR21}m\]"

# Highlight the hostname when root or connected via SSH.
if [[ "${USER}" == "root" ]]; then
    style_host="\[\\033[01;04;38;5;${JC_COLOR_STRESS}m\]"
elif [[ "${SSH_TTY}" ]]; then
    style_host="\[\\033[01;04;38;5;${JC_COLOR31}m\]"
fi

# Set the terminal title and prompt.
PS1=""
PS1+="${style_separator}[${reset}" # [
#PS1+="${style_user}\u${reset}"      # username
#PS1+="${style_separator}@${reset}"  # @
PS1+="${style_host}\h${reset}"      # host
PS1+="${style_separator}]${reset}"  # ]
PS1+=" "                            # space
PS1+="${style_directory}\W${reset}" # working directory (\W short, \w full path)
#
#PS1+="\$(prompt_git | {
#    read -r branchName
#    read -r status
#    if [[ -n \"\$branchName\" ]]; then
#        output=\"${style_separator}  ${reset}${style_git_branch}\${branchName}${reset}\"
#        if [[ -n \"\$status\" ]]; then
#            output+=\" ${style_separator}[${reset}${style_git_status}\${status}${reset}${style_separator}]${reset}\"
#        fi
#        echo -e \"\$output\"
#    fi
#})"
# PS1+="\n";
PS1+="${style_separator} → ${reset}" # $
export PS1

PS2="${style_separator} → ${reset}"
export PS2
